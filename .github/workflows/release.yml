name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:  # 手動トリガーの追加

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22.0'  # 必要に応じてGoのバージョンを変更

      - name: Build
        run: go build -o ppv.exe

      - name: Install Inno Setup
        run: choco install innosetup

      - name: Verify Inno Setup Installation
        shell: pwsh
        run: |
          $isccPath = "C:\Program Files (x86)\Inno Setup 6\ISCC.exe"
          if (Test-Path $isccPath) {
            Write-Output "ISCC.exe exists at $isccPath."
          } else {
            Write-Error "ISCC.exe does not exist at $isccPath."
          }

      - name: Check installer.iss Exists
        shell: pwsh
        run: |
          if (Test-Path ./installer.iss) {
            Write-Output "installer.iss exists."
          } else {
            Write-Error "installer.iss does not exist in the current directory."
          }

      - name: Create Installer
        shell: pwsh
        run: |
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" installer.iss | Tee-Object -FilePath iscc.log

      - name: Upload ISCC log
        uses: actions/upload-artifact@v3
        with:
          name: iscc-log
          path: iscc.log

      - name: List files after Create Installer
        shell: pwsh
        run: |
          Write-Output "Listing files in the current directory after Create Installer:"
          Get-ChildItem -Force
          Write-Output "Listing all files recursively:"
          Get-ChildItem -Recurse -Force

      - name: Verify Installer Exists
        shell: pwsh
        run: |
          if (Test-Path ./pypi-versions-setup.exe) {
            Write-Output "Installer exists."
            Get-ChildItem -Path . -Filter pypi-versions-setup.exe
          } else {
            Write-Error "Installer pypi-versions-setup.exe does not exist."
          }

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: installer
          path: ./pypi-versions-setup.exe

  release:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: installer

      - name: List downloaded artifacts
        run: |
          echo "Listing files in the current directory:"
          ls -la
          echo "Listing files in the 'installer' directory (if exists):"
          if [ -d "./installer" ]; then ls -la ./installer; fi

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
          files: installer/pypi-versions-setup.exe