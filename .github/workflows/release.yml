name: Build and Release

on:
  push:
    tags:
      - 'v*'  # 'v' で始まるタグのみトリガー
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22.0'  # 必要に応じてGoのバージョンを変更

      - name: Build
        run: go build -o ppv.exe

      - name: Install Inno Setup
        run: choco install innosetup

      - name: Verify Inno Setup Installation
        shell: pwsh
        run: |
          $isccPath = "C:\Program Files (x86)\Inno Setup 6\ISCC.exe"
          if (Test-Path $isccPath) {
            Write-Output "ISCC.exe が存在します: $isccPath"
          } else {
            Write-Error "ISCC.exe が存在しません: $isccPath"
          }

      - name: Check installer.iss Exists
        shell: pwsh
        run: |
          if (Test-Path ./installer.iss) {
            Write-Output "installer.iss が存在します。"
          } else {
            Write-Error "installer.iss が現在のディレクトリに存在しません。"
          }

      - name: Create Installer
        shell: pwsh
        run: |
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" installer.iss | Tee-Object -FilePath iscc.log

      - name: Upload ISCC log
        uses: actions/upload-artifact@v3
        with:
          name: iscc-log
          path: iscc.log

      - name: List files after Create Installer
        shell: pwsh
        run: |
          Write-Output "Create Installer後の現在のディレクトリ内のファイル一覧:"
          Get-ChildItem -Force
          Write-Output "すべてのファイルを再帰的に一覧表示:"
          Get-ChildItem -Recurse -Force

      - name: Verify Installer Exists
        shell: pwsh
        run: |
          if (Test-Path ./pypi-versions-setup.exe) {
            Write-Output "インストーラーが存在します。"
            Get-ChildItem -Path . -Filter pypi-versions-setup.exe
          } else {
            Write-Error "インストーラー pypi-versions-setup.exe が存在しません。"
          }

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: installer
          path: ./pypi-versions-setup.exe

  release:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: installer

      - name: List downloaded artifacts
        run: |
          echo "現在のディレクトリ内のファイル一覧:"
          ls -la
          echo "'installer' ディレクトリ内のファイル一覧（存在する場合）:"
          if [ -d "./installer" ]; then ls -la ./installer; fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./pypi-versions-setup.exe
          asset_name: pypi-versions-setup.exe
          asset_content_type: application/octet-stream